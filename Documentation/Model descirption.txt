### 1. Domain Model

#### 1.1. Project
- **Overview:**
  - Represents a large-scale construction project containing multiple apartments. Each project is a distinct entity with its own unique attributes and relationships.

- **Attributes:**
  - **Project ID:** Unique identifier for the project.
  - **Project Name:** Name of the project.
  - **Location:** Detailed physical location, influencing the value and desirability of the apartments.
  - **Amenities:** Description of common facilities provided (e.g., pool, gym, parks).
  - **Total Units:** Total number of apartments within the project.
  - **Project Logo:** Photo/logo uploadable via the system.
  - **Apartment List:** Collection of apartments associated with this project.

#### 1.2. Apartment
- **Overview:**
  - Represents an individual living space within a project or as a standalone unit. Apartments may be templated for future use or associated with specific customers.

- **Attributes:**
  - **Apartment ID:** Unique identifier.
  - **Apartment Name:** Name of the apartment.
  - **Apartment Type:** Indicates whether the apartment is part of a project, a template, or standalone.
  - **Space (Square Meters):** Total area of the apartment.
  - **Description:** Descriptive text about the apartment.
  - **Apartment Photos:** Collection of photos associated with the apartment.
  - **Packages List:** Collection of packages associated with the apartment.
  - **Addons List:** Collection of addons associated with the apartment.
  - **Status:** Current status of the apartment (e.g., Booked, In Progress, For Sale, Template).
  
  - **Customer ID:** If booked or in progress, this field contains the ID of the customer who owns or has reserved the apartment.
  - **Assigned Package:** Mandatory field that holds the package selected by the customer from the available package list.
  - **List of Assigned Addons:** Optional list of addons selected by the customer, with restrictions on the number of addons per category.
  - **Total Price:** Calculated field representing the sum of the assigned package price and the selected addons.

#### 1.3. Package
- **Overview:**
  - Represents predefined packages of features and enhancements available for an apartment. These packages are categorized into various levels (e.g., Golden, Silver, Platinum).

- **Attributes:**
  - **Package ID:** Unique identifier.
  - **Package Name:** Name of the package.
  - **Package Type:** Category of the package (e.g., Golden, Silver, Platinum).
  - **Price:** The cost associated with the package.

#### 1.4. Addons
- **Overview:**
  - Represents additional features that can be added to an apartment, such as air conditioning units, smart lighting, or solar heating systems.

- **Attributes:**
  - **Addons ID:** Unique identifier.
  - **Addons Name:** Name of the addon.
  - **Addons Type:** Type of addon (e.g., Air Conditioning 1.5 HP, Smart Lighting).
  - **Price Per Unit:** Cost associated with each unit of the addon.
  - **Max Units:** Maximum units that can be installed (e.g., max 3 for air conditioning, 1 for solar heating).
  - **Installed Units:** Actual number of units selected and installed by the customer.

#### 1.5. Customer
- **Overview:**
  - Represents an individual or entity that owns or is interested in purchasing apartments.

- **Attributes:**
  - **Customer ID:** Unique identifier.
  - **Personal Info:** Includes name, contact details, and other personal information.
  - **Linked Apartments:** List of apartments owned by the customer, including details about their project locations.
  - **Linked Invoices:** List of invoices associated with the customer.

#### 1.6. Booking
- **Overview:**
  - Represents the process of reserving an apartment by a customer, including the selection of packages, addons, and the generation of invoices.

- **Attributes:**
  - **Booking ID:** Unique identifier.
  - **Customer ID:** The ID of the customer making the booking.
  - **Apartment ID:** The ID of the apartment being booked.
  - **Created DateTime:** Timestamp when the booking was created.
  - **Status:** Current status of the booking (e.g., Pending, In Progress, Under Review, Approved, Rejected).
  - **Last Modified DateTime:** Timestamp of the last status change.
  - **Assigned Person:** The staff member assigned to follow up on the booking.
  - **List of Invoices:** Collection of invoices generated for this booking.
  - **Total Amount:** Total price calculated from the apartment, packages, and addons selected.
  - **Remaining Amount:** Dynamic calculation of the total amount minus the sum of paid invoices.
  - **Payment Method:** Method chosen for payment (e.g., Card, Cash, Invoice, Bank Transfer).

#### 1.7. Invoices
- **Overview:**
  - Represents financial documents detailing the transactions between the customer and the project.

- **Attributes:**
  - **Invoice ID:** Unique identifier.
  - **Customer ID:** ID of the customer associated with the invoice.
  - **Apartment ID:** ID of the apartment related to the invoice.
  - **Status:** Status of the invoice (e.g., Paid, Rejected, Pending).
  - **Amount:** Total amount for the invoice.
  - **Paid Date:** Date when the invoice was paid.
  - **Payment Method:** Method of payment used for this invoice.

#### 1.8. User
- **Overview:**
  - Represents the users of the system with access to various functionalities based on their roles.

- **Attributes:**
  - **User ID:** Unique identifier.
  - **Username:** Username of the user.
  - **Password:** Encrypted password.
  - **Role ID:** Role assigned to the user.
  - **Email:** Email address of the user.

#### 1.9. Role
- **Overview:**
  - Represents different access levels and permissions within the system.

- **Attributes:**
  - **Role ID:** Unique identifier.
  - **Role Name:** Name of the role (e.g., Admin, Sales, Customer).
  - **Permissions:** List of permissions associated with the role.

---

### 2. Domain Model Relationships

- **Project - Apartment:** One-to-Many relationship; a project contains multiple apartments.
- **Apartment - Package:** One-to-Many relationship; an apartment can have multiple packages available, but only one can be assigned.
- **Apartment - Addons:** One-to-Many relationship; an apartment can have multiple addons, with limitations on the number of each type.
- **Customer - Apartment:** Many-to-Many relationship; a customer can own multiple apartments, and an apartment can be linked to multiple customers (if considered for multiple ownership).
- **Booking - Apartment:** One-to-Many relationship; a booking is associated with one apartment, and an apartment can be involved in multiple bookings (e.g., pending, confirmed).
- **Booking - Invoices:** One-to-Many relationship; a booking can generate multiple invoices.
- **User - Role:** Many-to-One relationship; a user is assigned one role, and a role can be assigned to many users.

---

### 3. Workflow and Functions

#### 3.1. Project Management Functions
- **Add Apartment:** Function to add an apartment to the project’s apartment list.
- **Remove Apartment:** Function to remove an apartment from the project’s apartment list.
  
#### 3.2. Apartment Management Functions
- **Add Package:** Function to add a package to the apartment’s package list.
- **Remove Package:** Function to remove a package from the apartment’s package list.
- **Add Addon:** Function to add an addon to the apartment’s addon list.
- **Remove Addon:** Function to remove an addon from the apartment’s addon list.
- **Calculate Total Price:** Function to calculate the total price based on the selected package and addons, including the quantity of each addon.

#### 3.3. Package and Addon Management Functions
- **Cascading Price Updates:** When the price of a package or addon is updated, this change should propagate throughout the system, updating all related calculations and entities automatically.

#### 3.4. Booking Workflow
- **Step 1:** Customer views available apartments, packages, and addons.
- **Step 2:** Customer selects an apartment and creates a booking.
- **Step 3:** System clones the apartment instance with status "Booked."
- **Step 4:** Customer selects a package and assigns it.
- **Step 5:** Customer selects addons and their quantities, which are then assigned.
- **Step 6:** Total amount is calculated, and the invoice is generated.
- **Step 7:** Customer reviews and confirms the booking.
- **Step 8:** Booking status workflow begins, with status updates at each step (Pending, In Progress, Under Review, Approved, Rejected).
- **Step 9:** As payments are made, invoices are marked as paid, and the remaining amount is updated dynamically.

---

### 4. Validation and Enhancements

- **Apartment Validation:** Ensure that all mandatory fields, such as assigned packages and total prices, are validated before moving to the next workflow stage.
- **Booking Validation:** Implement checks to ensure that selected packages and addons are valid and within the allowed limits before allowing the booking to proceed.
- **Cascade Updates:** Ensure all price-related fields and totals are automatically updated across the system when base prices change.
- **Invoice Validation:** Add statuses to invoices (e.g., Paid, Rejected, Pending) and ensure the remaining amount calculation is accurate and dynamically updated.

